
Skip to Content Skip to Wiki Navigation Skip to Site Navigation

    Wikia
    Start a wiki
        Video Games
        Entertainment
        Lifestyle

    Log in	
    Username
    Password
    Forgot your password?	
    Stay logged in
    Or
    Connect
    Sign up	

Vim Tips Wiki

    On the Wiki
        Wiki Activity
        Random page
        Videos
        Photos
        Chat
    Community portal
    To do

Contribute
Share
Watchlist	Random page	Recent changes
Map caps lock to escape in Windows
Edit
Talk21
1,613pages on
this wiki
Tip 75 Printable Monobook Previous Next

created 2001 · complexity basic · author Igor Prischepoff · version 6.0

This tip shows some methods for mapping keys within the operating system to make life easier in Vim. In particular, it can be convenient to use the CapsLock key for Escape so you don't have to reach for the Esc key. It is also useful to use the CapsLock key for Ctrl and press Ctrl-[ instead of Esc.

This tip is for Windows systems (not Windows 9x). For Unix-based systems, see Map caps lock to escape in XWindows.

Some of the procedures here change the way keys behave for all applications. It may be better to use other methods to avoid the escape key in Vim.
Contents
[show]
RegistryEdit
WARNING: Editing your Windows registry may cause unintended side effects that render your system inoperable. Although this tip has worked in the past for some people, there is no guarantee that it will work for you. Use with caution, and at your own risk.

Before trying the following, you should run regedit.exe and inspect the relevant registry keys, and export them for a backup. Make sure you know how to remove the registry changes if they cause trouble.

For the current user (doesn't work in Windows 7 or 8): To map CapsLock to Escape, and ScrollLock to CapsLock, create file (for example) keys.reg containing:

REGEDIT4
[HKEY_CURRENT_USER\Keyboard Layout]
"Scancode Map"=hex:00,00,00,00,00,00,00,00,03,00,00,00,3a,00,46,00,01,00,3a,00,00,00,00,00

Use Explorer to double-click the file to import the value to the registry. To apply the changes, log off and log on. Then, pressing key Esc will generate Escape as normal, pressing CapsLock will also generate Escape, and pressing ScrollLock will generate CapsLock (and you cannot generate ScrollLock).

Alternatively, for the change to apply to all users, run the following reg file and reboot (this key still works in Windows 7 and 8):

REGEDIT4
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
"Scancode Map"=hex:00,00,00,00,00,00,00,00,03,00,00,00,3a,00,46,00,01,00,3a,00,00,00,00,00

To restore the keyboard, run regedit.exe and delete the "Scancode Map" entry from HKEY_CURRENT_USER (and log off/on), or from HKEY_LOCAL_MACHINE (and reboot), depending on which section of the registry you changed.
Use the Caps Lock key as CtrlEdit

Particularly while touch typing, it can be useful to remap the keyboard so that pressing CapsLock is the same as pressing Ctrl. This change makes it easy to press Ctrl-[ as an alternative to pressing Esc.

The following applies to the current user (log off and log on to apply). Alternatively, an administrator can apply the change to all users (reboot to apply) by replacing [HKEY_CURRENT_USER\Keyboard Layout] with [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]

Map CapsLock to LeftCtrl (press CapsLock to generate LeftCtrl):

REGEDIT4
[HKEY_CURRENT_USER\Keyboard Layout]
"Scancode Map"=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00

An alternative would be to replace the "Scancode Map" line with the following to swap CapsLock and LeftCtrl:

"Scancode Map"=hex:00,00,00,00,00,00,00,00,03,00,00,00,3a,00,1d,00,1d,00,3a,00,00,00,00,00

UtilitiesEdit

As an alternative to changing the registry, there are various utilities that can remap keys. Many of these can be run by a non-administrator, and can apply mappings only when wanted (for example, when running Vim). They do not require log off/on or reboot to apply changes, unless specified otherwise.
KeyTweakEdit

This tool is a free keyboard remapper for Windows NT/2000/XP/Vista/Win 7. It automates the registry trick above (it makes use of Microsoft's Scancode Map registry key) to remap your keyboard. This app requires you to reboot before changes take affect.

http://webpages.charter.net/krumsick/ (dead link)

http://www.softpedia.com/get/System/OS-Enhancements/KeyTweak.shtml
SharpKeysEdit

This tool is a free keyboard mapper, but requires rebooting the machine for the key mapping to take effect. The interface is fairly simple to use, and appears to work on Windows NT/2003 server/2000/XP/Vista/Win 7. By automating the keyboard mapping, this reduces the risk of the user accidentally changing something in the registry.

http://www.randyrants.com/2008/12/sharpkeys_30.html
AutoHotkeyEdit

AutoHotkey is an open source project to automate sending keys and mouse clicks. It can remap keys, and provides a powerful scripting language, and does not require administrator rights. One of the features of this program is that the key mappings are not permanent, but only last as long as the program is running.

To make Capslock work like Escape, add the following to the default script:

Capslock::Esc

The following AutoHotkey script will turn off CapsLock and generate Escape when Esc is pressed:

Esc::
SetCapsLockState, off
Suspend On
Send, {ESC}
Suspend Off
return

The following AutoHotkey script maps CapsLock to Ctrl in PuTTY. In other applications, CapsLock works normally.

classname = ""
keystate = ""

*CapsLock::
 WinGetClass, classname, A
 if (classname = "PuTTY")
   send,{Ctrl down}
 else
   GetKeyState, keystate, CapsLock, T
 if (keystate = "D")
   SetCapsLockState, Off
 else
   SetCapsLockState, On
 return

*CapsLock up::
 WinGetClass, classname, A
 if (classname = "PuTTY")
   send,{Ctrl up}
 return

The following AutoHotkey script maps CapsLock to ESC in Vim. In other applications, CapsLock works normally.

classname = ""
keystate = ""

*Capslock::
  WinGetClass, classname, A
  if (classname = "Vim")
  {
    SetCapsLockState, Off
    Send, {ESC}
  }
  else
  {
    GetKeyState, keystate, CapsLock, T
    if (keystate = "D")
      SetCapsLockState, Off
    else
      SetCapsLockState, On
    return
  }
  return

The following AutoHotKey script switches CapsLock and Escape. When the application is shut down, the keys return to their normal behavior:

CapsOn=false

Capslock::
;suspend to prevent calling esc
Suspend on
Send, {ESC}
Suspend off
return

Esc::
;use global variable to keep track of state
if CapsOn = false
{
 CapsOn = true
 SetCapsLockState, on
}
else
{
 CapsOn = false
 SetCapsLockState, off
}
return

The following AutoHotKey script tries to emulate an idea I read about from Steve Losh where he overloaded his "Caps Lock" key to do the following: when pressing it and another key the "Caps Lock" key is equivalent to a "Control", but when just pressing and releasing the "Caps Lock" quickly it sends an "Escape". I believe that this is the best of the both worlds! In his case, since he uses a Macbook, he was using the software "KeyRemap4Macbook", but the equivalent doesn't exist for Windows (that I know of). However, AutoHotkey can emulate this functionality.

; Sends Esc if capslock is pressed alone
; Sends Ctrl+key if capslock is pressed with another key
; TODO: work with arrow keys and other modifiers (e.g. shift, control)

SetCapsLockState AlwaysOff
CapsLock::Send {esc}
CapsLock & a::Send ^a
CapsLock & b::Send ^b
CapsLock & c::Send ^c
CapsLock & d::Send ^d
CapsLock & e::Send ^e
CapsLock & f::Send ^f
CapsLock & g::Send ^g
CapsLock & h::Send ^h
CapsLock & i::Send ^i
CapsLock & j::Send ^j
CapsLock & k::Send ^k
CapsLock & l::Send ^l
CapsLock & m::Send ^m
CapsLock & n::Send ^n
CapsLock & o::Send ^o
CapsLock & p::Send ^p
CapsLock & q::Send ^q
CapsLock & r::Send ^r
CapsLock & s::Send ^s
CapsLock & t::Send ^t
CapsLock & u::Send ^u
CapsLock & v::Send ^v
CapsLock & w::Send ^w
CapsLock & x::Send ^x
CapsLock & y::Send ^y
CapsLock & z::Send ^z
CapsLock & 0::Send ^0
CapsLock & 1::Send ^1
CapsLock & 2::Send ^2
CapsLock & 3::Send ^3
CapsLock & 4::Send ^4
CapsLock & 5::Send ^5
CapsLock & 6::Send ^6
CapsLock & 7::Send ^7
CapsLock & 8::Send ^8
CapsLock & 9::Send ^9
; how to scape ` and ; ?
; CapsLock & `::Send ^`
; CapsLock & ; ::Send ^;
CapsLock & '::Send ^'
CapsLock & ,::Send ^,
CapsLock & .::Send ^.
CapsLock & /::Send ^/
CapsLock & -::Send ^-
CapsLock & =::Send ^=
CapsLock & [::Send ^[
CapsLock & ]::Send ^]

The following script follows the same idea as the above while helping its shortcomings, and is more concise. It works by checking the last pressed key when the Caps Lock key is released. Hope it helps :)

; Author: fwompner gmail com
#InstallKeybdHook
SetCapsLockState, alwaysoff
Capslock::
Send {LControl Down}
KeyWait, CapsLock
Send {LControl Up}
if ( A_PriorKey = "CapsLock" )
{
	Send {Esc}
}
return

Here's an additional solution (which just sends Esc key when Ctrl is pressed alone, but does not modify Caps Lock in any way)

;Author: Autohotkey forum user RHCP
;http://www.autohotkey.com/board/topic/103174-dual-function-control-key/
$~*Ctrl:: 
if !state 
	state :=  (GetKeyState("Shift", "P") ||  GetKeyState("Alt", "P") || GetKeyState("LWin", "P") || GetKeyState("RWin", "P"))
return 

$~ctrl up::
if instr(A_PriorKey, "control") && !state
	send {esc}
state := 0 
return 

HotKeyzEdit

HotKeyz (freeware) is useful for assigning keyboard shortcuts to run frequently used applications using the <Win> key. It also allows CapsLock to be remapped to any key sequence, or to run an application.

The only disadvantage compared to the registry method is that the status of CapsLock is still set and is checked by applications, so if you press it letting the status LED of the keyboard turn on and then start an application, for example Notepad, you will start typing in uppercase and can't change it anymore. You have then to exit the application, turn the CapsLock status off and re-open the program. This is still easier than rebooting.
ExplanationsEdit
Registry scancodesEdit

The format used for "Scancode Map" in the registry is described below (from Scan Code Mapper for Windows and Keyboard scan codes). More information is at Remap the F12 Key, CapsLock Key or any Key in Windows XP, 2000, Vista and 2003.

"Scancode Map" is a registry binary value with the following format (each value is a 32-bit integer in little-endian order):

<00000000> <00000000> <NumberFollowingIntegers> <Mapping1> <Mapping2> ... <00000000>

A mapping consists of two 16-bit scancodes. The second scancode (high word) from the keyboard is replaced with the first scancode (low word). Some relevant scancodes are:

0x01 Esc
0x1D L-Ctrl
0x38 L-Alt
0x3A CapsLock
0x46 ScrollLock
0x0E Backspace

For example, the line

"Scancode Map"=hex:00,00,00,00,00,00,00,00,02,00,00,00,01,00,3a,00,00,00,00,00

consists of one mapping (01,00,3a,00) which replaces the scancode 0x003a with 0x0001. That means that pressing CapsLock (0x3a) will generate Escape (0x01).
See alsoEdit

    Discussion page for more details and alternatives
    Avoid the escape key for Vim methods to make pressing Esc easier 

CommentsEdit
Categories:

    VimTip

Read more

    If you open an xml document that is either totally or partially unindented, you can use the GNU...
    Format your xml document using xmllint

    ':set nu' enables line-numbering. Before version 7, it also shows in the on-line help which is...
    Toggle off the line-number when enter on-line help

    With the addition of folding, Vim6 can function as a high performance outline processor...
    Using Vim as an outline processor

Photos
Add a Photo	
122photos on this wiki	

    See all photos	

See all photos >
Recent Wiki Activity

    Folding with Regular Expression
    edited by Fritzophrenic 1 day ago
    Search and replace in a visual selection
    edited by Fritzophrenic 1 day ago
    Fast window resizing with plus/minus keys
    edited by A Wikia contributor 2 days ago
    Prevent escape from moving the cursor one character to the left
    edited by JohnBeckett 2 days ago

See more >	
Live! Chat

Vim Tips Wiki
Around Wikia's network
Random Wiki

[ Lifestyle ]

    About
    Community Central
    Careers
    Advertise
    API
    Contact Wikia
    Terms of Use
    Privacy Policy
    Content is available under CC-BY-SA.

TV Fanatic? Take our survey for a chance to win an iPad
Lifestyle Entertainment Video Games
gumgum-verify
