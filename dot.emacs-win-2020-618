(ido-mode t)
(global-set-key (kbd "C-,") 'ido-switch-buffer)
(global-set-key (kbd "C-;") 'set-mark-command)
(global-set-key (kbd "C-x C-;") 'pop-global-mark)

;;;for auto-complete (ac-config-default)
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)

(require 'auto-complete)
;(require 'ac-slime)
(add-to-list 'ac-modes 'javascript-mode) 
(add-to-list 'ac-modes 'html-mode)
(add-to-list 'ac-modes 'css-mode)
(add-to-list 'ac-modes 'python-mode)
;(add-to-list 'ac-modes 'slime-mode)
(add-to-list 'ac-modes 'scheme-mode)
(add-to-list 'ac-modes 'mhtml-mode)
(add-to-list 'ac-modes 'js-mode)
(add-to-list 'ac-modes 'elm-mode)
(add-to-list 'ac-modes 'haskell-mode)
(ac-config-default)
;(add-hook 'slime-mode-hook 'set-up-slime-ac)
;(add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
;(eval-after-load "auto-complete"
 ;'(add-to-list 'ac-modes 'slime-repl-mode))

 (show-paren-mode t)
 (setq completion-ignore-case t)
 (setq confirm-nonexistent-file-or-buffer nil)
 (setq inhibit-startup-message t)
(setq initial-scratch-message nil)
(menu-bar-mode -1)

(cd "C:/Users/admin/Desktop")

;;; solve C-v cause page down is stuck 'cause font scan
;;;(set-face-attribute 'default nil :family "SimSun" :height 100)
;;; ;; Setting Chinese Font
;;;(dolist (charset '(kana han symbol cjk-misc bopomofo))
 ;;; (set-fontset-font (frame-parameter nil 'font)
  ;;          charset
  ;;          (font-spec :family "Microsoft Yahei " :size 14)))

;;; unicode characters
;;;(set-default-font "Microsoft YaHei UI Bold-10")
;;;(set-fontset-font "fontset-default"  
;;;                  'gb18030' ("Microsoft YaHei UI Bold" . "unicode-bmp"))
(require 'unicode-fonts)
(unicode-fonts-setup)
;;;(set-default-font "微软雅黑 Bold-10")
;(set-default-font "Consolas Bold-10")
;;; just set it by emacs's menu-bar 
;(set-default-font "Fira Mono Regular-10")


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (neotree haskell-tab-indent lsp-mode hlint-refactor haskell-emacs ace-window haskell-mode elm-mode unicode-fonts tabbar ## twittering-mode ac-slime)))
 '(show-paren-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "CamingoCode" :foundry "outline" :slant normal :weight normal :height 110 :width normal))))
  '(erc-current-nick-face ((t (:foreground "red" :weight bold))))
  '(erc-nick-msg-face ((t (:foreground "red")))))

(setq erc-header-line-format nil)

(require 'tabbar)
(tabbar-mode 1)
(global-set-key [(meta p)] 'tabbar-backward)
(global-set-key [(meta n)] 'tabbar-forward)
(setq tabbar-use-images nil)

;;; group all buffers into 5 groups, *, ERC, Python, Haskell and others
(defun tabbar-buffer-groups ()
  (list
   (cond ((string-equal "*" (substring (buffer-name) 0 1)) "Emacs Buffer")  
         ((eq major-mode 'erc-mode)  "ERC")
         ((eq major-mode 'python-mode) "Python")
         ((eq major-mode 'mhtml-mode) "Python")
         ((eq major-mode 'css-mode) "Python")
         ((eq major-mode 'js-mode) "Python")
         ((eq major-mode 'haskell-mode) "Haskell")
         (t "User Buffer")
 )))

(setq tabbar-buffer-groups-function 'tabbar-buffer-groups)

;;;<b> erc-mode . You can tell for yourself if you're using erc: go into an
;;; erc buffer and C-h v major-mode RET

;;;(set-face-attribute 'tabbar-default nil :family "SimSun" :height 106 :box nil :background "grey80" :foreground "purple")
;;;(set-face-attribute 'tabbar-selected nil :inherit 'tabbar-default :foreground "blue" :background "grey80")

(set-face-attribute 'tabbar-default nil :background "gray20" :foreground "gray60" :distant-foreground "gray50" :family "Helvetica Neue" :box nil)
(set-face-attribute 'tabbar-unselected nil :background "gray20" :foreground "black" :box nil)
(set-face-attribute 'tabbar-modified nil :foreground "red4" :box nil :inherit 'tabbar-unselected)
;;;(set-face-attribute 'tabbar-selected nil :background "#4466aa" :foreground "black" :box nil)
(set-face-attribute 'tabbar-selected nil :background "gray20" :foreground "#4466aa" :box nil)
;;;(set-face-attribute 'tabbar-selected-modified nil :inherit 'tabbar-selected  :box nil :background "#4466aa" :foreground "black")
(set-face-attribute 'tabbar-selected-modified nil :inherit 'tabbar-selected  :box nil :background "gray20" :foreground "#4466aa")
(set-face-attribute 'tabbar-button nil :box nil)
(customize-set-variable 'tabbar-separator '(1.5))
(customize-set-variable 'tabbar-use-images nil)
(customize-set-variable 'tabbar-background-color "gray20")
(customize-set-variable 'tabbar-separator '(0.5))
(customize-set-variable 'tabbar-use-images nil)

;;;(set-face-background 'mode-line          "#4466aa")
;;;(set-face-foreground 'mode-line          "black")
(set-face-background 'mode-line          "gray20")
(set-face-foreground 'mode-line          "#4466aa")
;;;(set-face-background 'mode-line          "gray20")
;;;(set-face-background 'mode-line-inactive "#99aaff")
(set-face-background 'mode-line-inactive "gray20")
(set-face-foreground 'mode-line-inactive "#4466aa")
;;;(set-face-background 'fringe "#809088")

(setq erc-header-line-format nil)

;;; show line number
;;;display-line-numbers-mode instead of linum-mode since 26.1
;;; https://www.masteringemacs.org/article/whats-new-in-emacs-26-1
;;;M-g g 35
;;; like 35G in vim
(global-set-key (kbd "M-g") 'goto-line)
(global-set-key (kbd "C-x g") 'goto-line)
;;; like ma in vim
(global-set-key (kbd "C-x p")  'point-to-register)
;;; like 'a in vim
(global-set-key (kbd "C-x j") 'jump-to-register)
;;;like :s/whatever/you-want
(global-set-key (kbd "C-x c") 'replace-regexp)
;;; make linum-mode hook python-mode
(dolist (hook '(python-mode-hook
                javascript-mode-hook
                html-mode-hook
                css-mode-hook
                js-mode
				mhtml-mode
                haskell-mode-hook
		c-mode-common-hook))
(add-hook hook (lambda () (display-line-numbers-mode t))))

(require 'tramp)
(customize-set-variable
           'tramp-ssh-controlmaster-options
           (concat
             "-o ControlPath=/tmp/ssh-ControlPath-%%r@%%h:%%p "
             "-o ControlMaster=auto -o ControlPersist=yes"))

(defun unword (alst)
  (reduce (lambda (x y) (concat x y)) (mapcar (lambda (x) (concat x " ")) alst)))

(defun my-python-compile2 () 
  (interactive)
  (run-code "python3" "" "" "*Another Shell Buffer*"))

(defun my-python-compile ()
 "(run-code \"python3\" \"\" \"\" \"*Async Shell Command*\")"
  (interactive)
(run-code "python3" "" "" "*Async Shell Command*"))

(defun my-haskell-compile2 () 
  (interactive)
  (run-code "runghc" "" "" "*Another Shell Buffer*"))

(defun my-haskell-compile () 
  (interactive)
  (run-code "runghc" "" "" "*Async Shell Command*"))

;;; (run-code "runghc" "-f /usr/bin/ghc" "a.conf" "another-shell-buffer")
;;; this will run as "runghc -f /usr/bin/ghc tmp-file.hs a.conf "
(defun run-code (run-cmd pre-parameter rest-parameter async-buffer-name)
  "(run-code 'runghc' '-f /usr/bin/ghc' 'a.conf' 'another-shell-buffer')
   this will run as 'runghc -f /usr/bin/ghc current-buffer.hs.tmp a.conf'"
  (interactive)
  (if (string-match "^/plink:.*?:" (buffer-file-name (current-buffer)))
      ;;; if tramp-mode on remote
      (progn
        (write-region (point-min) (point-max) (concat (buffer-file-name) ".tmp"))
        (setq tmp-file (concat
              (substring (buffer-file-name) 
                         (+ 1 (string-match ":/.*" (buffer-file-name)))
                         (length (buffer-file-name)))
              ".tmp"))
        )
      ;;; on local
      (progn (setq tmp-file (concat (buffer-file-name) ".tmp"))
             (write-region (point-min) (point-max) tmp-file)))
  (let* ((another-shell-buffer (get-buffer-create async-buffer-name))
         (proc (progn
                 (async-shell-command (unword `(,run-cmd ,pre-parameter ,tmp-file ,rest-parameter)) another-shell-buffer)
                 (switch-to-buffer-other-window another-shell-buffer)
                 (get-buffer-process another-shell-buffer))))
    (if (process-live-p proc)
        (set-process-sentinel proc #'after-async-done)
      (message "No process running."))))

(defun after-async-done (process signal)
  (when (memq (process-status process) '(exit signal))
    (back-to-code-buffer)
    (shell-command-sentinel process signal)))

(defun back-to-code-buffer ()
  (interactive)
  (switch-to-buffer-other-window 
   (substring (car (last (split-string tmp-file "/"))) 0 -4)))

;;; https://emacs.stackexchange.com/questions/42172/run-elisp-when-async-shell-command-is-done
;;; https://stackoverflow.com/questions/34857843/kill-emacss-async-shell-command-buffer-if-command-is-terminated

(add-hook 'python-mode-hook
          (lambda () (local-set-key (kbd "<f5>") 'my-python-compile)
            (local-set-key (kbd "<f6>") 'my-python-compile2)
            (local-set-key (kbd "C-c r") 'my-python-compile)
            (local-set-key (kbd "C-c e") 'my-python-compile2)
))

;;; in tramp-mode buffer, M-x shell RET, will open remote shell

(electric-indent-mode -1)
(add-hook 'haskell-mode-hook
	  (lambda () (local-set-key (kbd "<f5>") 'my-haskell-compile)
            (local-set-key (kbd "<f6>") 'my-haskell-compile2)
            (local-set-key (kbd "C-c r") 'my-haskell-compile)
            (local-set-key (kbd "C-c e") 'my-haskell-compile2)
            (haskell-indentation-mode -1)
            (haskell-indent-mode 1) ;;; just won't work, I don't know why
))
;;; http://haskell.github.io/haskell-mode/manual/latest/Indentation.html#Indentation
;;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)

;;; M-x package-install haskell-mode     C-c C-l will eval code in interpreter
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)
;;; (add-hook 'haskell-mode-hook 'haskell-indent-mode)
(add-hook 'haskell-mode-hook 'haskell-doc-mode)


(setq compilation-save-buffers-predicate '(lambda () nil))
(setq compilation-always-kill t)
;;;make erc work with tabbar
(setq erc-header-line-uses-tabbar-p t)
;;; emacs over socks5
;(setq socks-override-functions 1)
;(setq socks-noproxy '("localhost"))
;(require 'socks)
;(setq socks-server (list "My socks server" "localhost" 7070 5))
;;;https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

;;; use spaces instead of tabs, https://www.emacswiki.org/emacs/NoTab
(setq-default indent-tabs-mode nil)


;;; auto-complete perfer upper case, but I want lower case, so ignore case
(setq ac-ignore-case nil)
(global-set-key (kbd "C-x o") 'ace-window)

(add-hook 'haskell-mode-hook 'interactive-haskell-mode)
;;;(add-hook 'haskell-mode-hook 'haskell-indent-mode)
(add-hook 'haskell-mode-hook 'haskell-doc-mode)

;;; Shift-Tab back for four whitespace
(defun jusss/back-by-4 () (interactive)
          ;;;(backward-delete-char-untabify 4)
          (backward-char 4)
)
          
(global-set-key (kbd "<S-tab>") 'jusss/back-by-4)

(defun my-turn-indentation-off ()
  (interactive)
  ;;; disable tab indent
  (local-set-key (kbd "<tab>") 'tab-to-tab-stop)
  ;;; enable indent for previous line
 ;;;(local-set-key (kbd "<tab>") 'indent-relative)
 (setq tab-width 4)
)

;;; disable all the tab indent
(dolist (hook '(perl-mode-hook
                c-mode-hook
                haskell-mode-hook
                java-mode-hook))
  (add-hook hook 'my-turn-indentation-off))

;;; package-install neotree, use f8 to toggle neotree, cd your main directory, then f8, it will expand this directory as file tree
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)

